{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\welcome\\\\Desktop\\\\TTCNPM\\\\front-end\\\\hplBooking_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\welcome\\\\Desktop\\\\TTCNPM\\\\front-end\\\\hplBooking_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\welcome\\\\Desktop\\\\TTCNPM\\\\front-end\\\\hplBooking_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\welcome\\\\Desktop\\\\TTCNPM\\\\front-end\\\\hplBooking_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\welcome\\\\Desktop\\\\TTCNPM\\\\front-end\\\\hplBooking_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\welcome\\\\Desktop\\\\TTCNPM\\\\front-end\\\\hplBooking_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\welcome\\\\Desktop\\\\TTCNPM\\\\front-end\\\\hplBooking_frontend\\\\src\\\\components\\\\Schedule.js\";\nimport React from 'react';\nimport { Table, Button, Notification, Loading, MessageBox, Popover } from 'element-react';\nimport * as moment from 'moment'; // import Web3 from 'web3';\n\nimport api from './api'; // import Work from '../contracts/Work.json';\n\nvar Schedule =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Schedule, _React$Component);\n\n  function Schedule(props) {\n    var _this;\n\n    _classCallCheck(this, Schedule);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Schedule).call(this, props));\n    _this.state = {\n      // newContractAddress: null,\n      // currentContract: [],\n      // isLoading: false,\n      // drizzleState: null,\n      columns: [{\n        label: 'Time',\n        prop: 'time',\n        width: 120,\n        sortable: true\n      }, {\n        label: 'Duration',\n        prop: 'timespan',\n        width: 100,\n        sortable: true\n      }, {\n        label: 'Salary',\n        prop: 'salary',\n        width: 100,\n        sortable: true\n      }, {\n        label: 'Owner',\n        prop: 'owner',\n        width: 130,\n        sortable: true\n      }, {\n        label: 'Helper',\n        prop: 'helper',\n        width: 130,\n        sortable: true\n      }, {\n        label: 'Address',\n        prop: 'address',\n        width: 150\n      }, {\n        label: 'Type',\n        prop: 'type',\n        sortable: true\n      }, {\n        label: 'Status',\n        prop: 'status'\n      }, {\n        label: 'Operations',\n        prop: 'contractAddress',\n        width: 120,\n        fixed: 'right',\n        render: function render(row, column, index) {\n          if (_this.state.data[index].helper == 'Not Assigned') return React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }, \"No Helper, no contract\");\n          if (_this.state.data[index].contractAddress) return React.createElement(Button, {\n            type: \"text\",\n            size: \"small\" // onClick={this.getContract.bind(this, index)}\n            ,\n            onClick: _this.watchContract.bind(_assertThisInitialized(_assertThisInitialized(_this)), index),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }, _this.state.data[index].contractAddress);\n          if (sessionStorage.getItem('role') === '0') return React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, \"Waiting for contract\");\n          return React.createElement(Button, {\n            type: \"text\",\n            size: \"small\",\n            onClick: _this.createContract.bind(_assertThisInitialized(_assertThisInitialized(_this)), index),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }, \"Create contract\");\n        }\n      }],\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(Schedule, [{\n    key: \"watchContract\",\n    value: function watchContract(index) {\n      window.open(\"https://ropsten.etherscan.io/address/\" + this.state.data[index].contractAddress);\n    } // createContract(index) {\n    //   const { drizzle, drizzleState } = this.props;\n    //   const work = this.state.data[index];\n    //   // var web3 = new Web3(drizzle.web3.currentProvider);\n    //   // var myContract = new web3.eth.Contract(Work.abi);\n    //   this.setState({\n    //     isLoading: true,\n    //   });\n    //   myContract\n    //     .deploy({\n    //       data: Work.bytecode,\n    //     })\n    //     .send({\n    //       from: drizzleState.accounts[0],\n    //       gas: 1500000,\n    //       gasPrice: '10000000000',\n    //     })\n    //     .then(newContractInstance => {\n    //       this.setState({\n    //         newContractAddress: newContractInstance.options.address\n    //       });\n    //       console.log(work);\n    //       return newContractInstance.methods.setData(\n    //         work._owner.walletAddress,\n    //         work._helper.walletAddress,\n    //         work._id,\n    //         work.address,\n    //         \"\",\n    //         parseInt(work.salary) * 1000,\n    //         moment(work.time).valueOf()\n    //       ).send({\n    //         from: drizzleState.accounts[0],\n    //         gas: 1500000,\n    //         gasPrice: '10000000000',\n    //       });\n    //     })\n    //     .then(() => {\n    //       return api.addContractAddress(\n    //         this.state.data[index]._id,\n    //         this.state.newContractAddress\n    //       );\n    //     })\n    //     .then(data => {\n    //       Notification.success({\n    //         title: 'Contract creation success',\n    //         onClick: () => {\n    //           window.open(\"https://ropsten.etherscan.io/address/\" + this.state.newContractAddress);\n    //         },\n    //         offset: 300\n    //       });\n    //       // update data with newly returned data\n    //       this.state.data[index] = data;\n    //       this.forceUpdate();\n    //     })\n    //     .catch(err => {\n    //       Notification.error({\n    //         title: 'Contract creation error',\n    //       });\n    //       console.log(err);\n    //     })\n    //     .finally(() => {\n    //       this.setState({\n    //         isLoading: false,\n    //       });\n    //     });\n    // }\n\n  }, {\n    key: \"getContract\",\n    value: function getContract(index) {\n      var _this$props = this.props,\n          drizzle = _this$props.drizzle,\n          drizzleState = _this$props.drizzleState;\n      var work = this.state.data[index]; // var web3 = new Web3(drizzle.web3.currentProvider);\n      // var instance = new web3.eth.Contract(Work.abi, work.contractAddress);\n      // instance.methods.getData().call({\n      //   from: drizzleState.accounts[0],\n      //   gas: 1500000,\n      //   gasPrice: '10000000000',\n      // })\n      // .then((result) => {\n      //   this.setState({\n      //     currentContract: result\n      //   });\n      //   console.log(result)\n      //   // MessageBox.alert(JSON.stringify(result), 'Contract data');\n      // })\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// api\n      //   .getWorkListOfUser()\n      //   .then(data => {\n      //     // alert(JSON.stringify(data));\n      //     data.map(d => {\n      //       d.time = new Date(Date.parse(d.time));\n      //       d.time = d.time.toLocaleString();\n      //       d.timespan = moment.duration(d.timespan).asHours();\n      //       d._owner = d.owner;\n      //       d.owner = d.owner.username;\n      //       d._helper = d.helper;\n      //       d.helper = d.helper ? d.helper.username : 'Not Assigned';\n      //       d.status = d.status == 0 ? 'Due' : 'Done';\n      //       d.address = d.location;\n      //       d.salary = d.expectedSalary;\n      //     });\n      //     this.setState({ data });\n      //   })\n      //   .catch(err => {\n      //     alert(err);\n      //   });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (//<Loading loading={this.state.isLoading} text=\"Creating smart contract\">\n        React.createElement(Table, {\n          style: {\n            width: '100%',\n            backgroundcolor: '1111'\n          },\n          columns: this.state.columns,\n          data: this.state.data,\n          border: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        }) //</Loading>\n\n      );\n    }\n  }]);\n\n  return Schedule;\n}(React.Component);\n\nexport { Schedule as default };","map":{"version":3,"sources":["C:\\Users\\welcome\\Desktop\\TTCNPM\\front-end\\hplBooking_frontend\\src\\components\\Schedule.js"],"names":["React","Table","Button","Notification","Loading","MessageBox","Popover","moment","api","Schedule","props","state","columns","label","prop","width","sortable","fixed","render","row","column","index","data","helper","contractAddress","watchContract","bind","sessionStorage","getItem","createContract","window","open","drizzle","drizzleState","work","backgroundcolor","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,YAAxB,EAAsCC,OAAtC,EAA+CC,UAA/C,EAA2DC,OAA3D,QAA0E,eAA1E;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB,C,CAEA;;AAEA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;IAEqBC,Q;;;;;AACnB,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACX;AACA;AACA;AACA;AACAC,MAAAA,OAAO,EAAE,CACP;AACEC,QAAAA,KAAK,EAAE,MADT;AAEEC,QAAAA,IAAI,EAAE,MAFR;AAGEC,QAAAA,KAAK,EAAE,GAHT;AAIEC,QAAAA,QAAQ,EAAE;AAJZ,OADO,EAOP;AACEH,QAAAA,KAAK,EAAE,UADT;AAEEC,QAAAA,IAAI,EAAE,UAFR;AAGEC,QAAAA,KAAK,EAAE,GAHT;AAIEC,QAAAA,QAAQ,EAAE;AAJZ,OAPO,EAaP;AACEH,QAAAA,KAAK,EAAE,QADT;AAEEC,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,KAAK,EAAE,GAHT;AAIEC,QAAAA,QAAQ,EAAE;AAJZ,OAbO,EAmBP;AACEH,QAAAA,KAAK,EAAE,OADT;AAEEC,QAAAA,IAAI,EAAE,OAFR;AAGEC,QAAAA,KAAK,EAAE,GAHT;AAIEC,QAAAA,QAAQ,EAAE;AAJZ,OAnBO,EAyBP;AACEH,QAAAA,KAAK,EAAE,QADT;AAEEC,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,KAAK,EAAE,GAHT;AAIEC,QAAAA,QAAQ,EAAE;AAJZ,OAzBO,EA+BP;AACEH,QAAAA,KAAK,EAAE,SADT;AAEEC,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,KAAK,EAAE;AAHT,OA/BO,EAoCP;AACEF,QAAAA,KAAK,EAAE,MADT;AAEEC,QAAAA,IAAI,EAAE,MAFR;AAGEE,QAAAA,QAAQ,EAAE;AAHZ,OApCO,EA0CP;AACEH,QAAAA,KAAK,EAAE,QADT;AAEEC,QAAAA,IAAI,EAAE;AAFR,OA1CO,EA+CP;AACED,QAAAA,KAAK,EAAE,YADT;AAEEC,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,KAAK,EAAE,GAHT;AAIEE,QAAAA,KAAK,EAAE,OAJT;AAKEC,QAAAA,MAAM,EAAE,gBAACC,GAAD,EAAMC,MAAN,EAAcC,KAAd,EAAwB;AAC9B,cAAI,MAAKV,KAAL,CAAWW,IAAX,CAAgBD,KAAhB,EAAuBE,MAAvB,IAAiC,cAArC,EACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAP;AACF,cAAI,MAAKZ,KAAL,CAAWW,IAAX,CAAgBD,KAAhB,EAAuBG,eAA3B,EACE,OACI,oBAAC,MAAD;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,OAFP,CAGE;AAHF;AAIE,YAAA,OAAO,EAAI,MAAKC,aAAL,CAAmBC,IAAnB,wDAA8BL,KAA9B,CAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAOG,MAAKV,KAAL,CAAWW,IAAX,CAAgBD,KAAhB,EAAuBG,eAP1B,CADJ;AAWF,cAAIG,cAAc,CAACC,OAAf,CAAuB,MAAvB,MAAmC,GAAvC,EACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAP;AACF,iBACE,oBAAC,MAAD;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,OAFP;AAGE,YAAA,OAAO,EAAE,MAAKC,cAAL,CAAoBH,IAApB,wDAA+BL,KAA/B,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF;AASD;AA/BH,OA/CO,CALE;AAsFXC,MAAAA,IAAI,EAAE;AAtFK,KAAb;AAHiB;AA2FlB;;;;kCAEaD,K,EAAO;AACnBS,MAAAA,MAAM,CAACC,IAAP,CAAY,0CAA0C,KAAKpB,KAAL,CAAWW,IAAX,CAAgBD,KAAhB,EAAuBG,eAA7E;AACD,K,CAED;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;gCAEYH,K,EAAO;AAAA,wBACiB,KAAKX,KADtB;AAAA,UACTsB,OADS,eACTA,OADS;AAAA,UACAC,YADA,eACAA,YADA;AAGjB,UAAMC,IAAI,GAAG,KAAKvB,KAAL,CAAWW,IAAX,CAAgBD,KAAhB,CAAb,CAHiB,CAKjB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;wCAEmB,CAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;6BAEQ;AACP,aACE;AACE,4BAAC,KAAD;AACE,UAAA,KAAK,EAAE;AAAEN,YAAAA,KAAK,EAAE,MAAT;AAAiBoB,YAAAA,eAAe,EAAE;AAAlC,WADT;AAEE,UAAA,OAAO,EAAE,KAAKxB,KAAL,CAAWC,OAFtB;AAGE,UAAA,IAAI,EAAE,KAAKD,KAAL,CAAWW,IAHnB;AAIE,UAAA,MAAM,MAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CAQE;;AARF;AAUD;;;;EAlOmCtB,KAAK,CAACoC,S;;SAAvB3B,Q","sourcesContent":["import React from 'react';\r\nimport { Table, Button, Notification, Loading, MessageBox, Popover } from 'element-react';\r\nimport * as moment from 'moment';\r\n\r\n// import Web3 from 'web3';\r\n\r\nimport api from './api';\r\n// import Work from '../contracts/Work.json';\r\n\r\nexport default class Schedule extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // newContractAddress: null,\r\n      // currentContract: [],\r\n      // isLoading: false,\r\n      // drizzleState: null,\r\n      columns: [\r\n        {\r\n          label: 'Time',\r\n          prop: 'time',\r\n          width: 120,\r\n          sortable: true,\r\n        },\r\n        {\r\n          label: 'Duration',\r\n          prop: 'timespan',\r\n          width: 100,\r\n          sortable: true,\r\n        },\r\n        {\r\n          label: 'Salary',\r\n          prop: 'salary',\r\n          width: 100,\r\n          sortable: true,\r\n        },\r\n        {\r\n          label: 'Owner',\r\n          prop: 'owner',\r\n          width: 130,\r\n          sortable: true,\r\n        },\r\n        {\r\n          label: 'Helper',\r\n          prop: 'helper',\r\n          width: 130,\r\n          sortable: true,\r\n        },\r\n        {\r\n          label: 'Address',\r\n          prop: 'address',\r\n          width: 150,\r\n        },\r\n        {\r\n          label: 'Type',\r\n          prop: 'type',\r\n          sortable: true,\r\n        },\r\n\r\n        {\r\n          label: 'Status',\r\n          prop: 'status',\r\n        },\r\n\r\n        {\r\n          label: 'Operations',\r\n          prop: 'contractAddress',\r\n          width: 120,\r\n          fixed: 'right',\r\n          render: (row, column, index) => {\r\n            if (this.state.data[index].helper == 'Not Assigned')\r\n              return <p>No Helper, no contract</p>;\r\n            if (this.state.data[index].contractAddress)\r\n              return (\r\n                  <Button\r\n                    type=\"text\"\r\n                    size=\"small\"\r\n                    // onClick={this.getContract.bind(this, index)}\r\n                    onClick = {this.watchContract.bind(this, index)}\r\n                    \r\n                  >\r\n                    {this.state.data[index].contractAddress}\r\n                  </Button>\r\n              );\r\n            if (sessionStorage.getItem('role') === '0')\r\n              return <p>Waiting for contract</p>;\r\n            return (\r\n              <Button\r\n                type=\"text\"\r\n                size=\"small\"\r\n                onClick={this.createContract.bind(this, index)}\r\n              >\r\n                Create contract\r\n              </Button>\r\n            );\r\n          },\r\n        },\r\n      ],\r\n      data: [],\r\n    };\r\n  }\r\n\r\n  watchContract(index) {\r\n    window.open(\"https://ropsten.etherscan.io/address/\" + this.state.data[index].contractAddress);\r\n  }\r\n\r\n  // createContract(index) {\r\n  //   const { drizzle, drizzleState } = this.props;\r\n\r\n  //   const work = this.state.data[index];\r\n\r\n  //   // var web3 = new Web3(drizzle.web3.currentProvider);\r\n  //   // var myContract = new web3.eth.Contract(Work.abi);\r\n\r\n  //   this.setState({\r\n  //     isLoading: true,\r\n  //   });\r\n\r\n  //   myContract\r\n  //     .deploy({\r\n  //       data: Work.bytecode,\r\n  //     })\r\n  //     .send({\r\n  //       from: drizzleState.accounts[0],\r\n  //       gas: 1500000,\r\n  //       gasPrice: '10000000000',\r\n  //     })\r\n  //     .then(newContractInstance => {\r\n  //       this.setState({\r\n  //         newContractAddress: newContractInstance.options.address\r\n  //       });\r\n  //       console.log(work);\r\n  //       return newContractInstance.methods.setData(\r\n  //         work._owner.walletAddress,\r\n  //         work._helper.walletAddress,\r\n  //         work._id,\r\n  //         work.address,\r\n  //         \"\",\r\n  //         parseInt(work.salary) * 1000,\r\n  //         moment(work.time).valueOf()\r\n  //       ).send({\r\n  //         from: drizzleState.accounts[0],\r\n  //         gas: 1500000,\r\n  //         gasPrice: '10000000000',\r\n  //       });\r\n  //     })\r\n  //     .then(() => {\r\n  //       return api.addContractAddress(\r\n  //         this.state.data[index]._id,\r\n  //         this.state.newContractAddress\r\n  //       );\r\n  //     })\r\n  //     .then(data => {\r\n  //       Notification.success({\r\n  //         title: 'Contract creation success',\r\n  //         onClick: () => {\r\n  //           window.open(\"https://ropsten.etherscan.io/address/\" + this.state.newContractAddress);\r\n  //         },\r\n  //         offset: 300\r\n  //       });\r\n  //       // update data with newly returned data\r\n  //       this.state.data[index] = data;\r\n  //       this.forceUpdate();\r\n  //     })\r\n  //     .catch(err => {\r\n  //       Notification.error({\r\n  //         title: 'Contract creation error',\r\n  //       });\r\n  //       console.log(err);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       this.setState({\r\n  //         isLoading: false,\r\n  //       });\r\n  //     });\r\n  // }\r\n\r\n  getContract(index) {\r\n    const { drizzle, drizzleState } = this.props;\r\n\r\n    const work = this.state.data[index];\r\n\r\n    // var web3 = new Web3(drizzle.web3.currentProvider);\r\n    // var instance = new web3.eth.Contract(Work.abi, work.contractAddress);\r\n\r\n    // instance.methods.getData().call({\r\n    //   from: drizzleState.accounts[0],\r\n    //   gas: 1500000,\r\n    //   gasPrice: '10000000000',\r\n    // })\r\n    // .then((result) => {\r\n    //   this.setState({\r\n    //     currentContract: result\r\n    //   });\r\n    //   console.log(result)\r\n    //   // MessageBox.alert(JSON.stringify(result), 'Contract data');\r\n    // })\r\n  }\r\n\r\n  componentDidMount() {   \r\n    // api\r\n    //   .getWorkListOfUser()\r\n    //   .then(data => {\r\n    //     // alert(JSON.stringify(data));\r\n    //     data.map(d => {\r\n    //       d.time = new Date(Date.parse(d.time));\r\n    //       d.time = d.time.toLocaleString();\r\n    //       d.timespan = moment.duration(d.timespan).asHours();\r\n    //       d._owner = d.owner;\r\n    //       d.owner = d.owner.username;\r\n    //       d._helper = d.helper;\r\n    //       d.helper = d.helper ? d.helper.username : 'Not Assigned';\r\n    //       d.status = d.status == 0 ? 'Due' : 'Done';\r\n    //       d.address = d.location;\r\n    //       d.salary = d.expectedSalary;\r\n    //     });\r\n    //     this.setState({ data });\r\n    //   })\r\n    //   .catch(err => {\r\n    //     alert(err);\r\n    //   });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      //<Loading loading={this.state.isLoading} text=\"Creating smart contract\">\r\n        <Table\r\n          style={{ width: '100%', backgroundcolor: '1111' }}\r\n          columns={this.state.columns}\r\n          data={this.state.data}\r\n          border\r\n        />\r\n      //</Loading>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}